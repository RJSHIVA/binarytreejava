import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
/*Let's go through the code step by step and explain each part:

The code starts by importing necessary classes and packages: java.util.ArrayList, java.util.HashMap, java.util.LinkedList, and java.util.Queue.

The code defines a class named INITIATION.

Inside the INITIATION class, there are two static nested classes: Node and binarytree.

The Node class represents a node in a binary tree. It has an int data value and references to its left and right child nodes.

The binarytree class has a static method called buildtree that takes an array of integers as input and builds a binary tree recursively based on the values in the array. It returns the root node of the constructed binary tree.

The code defines several static methods for different operations on binary trees, such as inorder, postorder, levelorder, height, count, sum, diameter, diameter2, isidentical, issubtree, topview, kthlevel, lca, lca2, getdistance, mindistance, kthancestor, transform, and preorder. I will explain each of these methods briefly:

inorder: Performs an inorder traversal of the binary tree and prints the node values.
postorder: Performs a postorder traversal of the binary tree and prints the node values.
levelorder: Performs a level-order traversal of the binary tree and prints the node values.
height: Calculates the height of the binary tree (the maximum number of edges in the longest path from the root to a leaf node).
count: Counts the number of nodes in the binary tree.
sum: Calculates the sum of all node values in the binary tree.
diameter: Calculates the diameter of the binary tree (the number of nodes in the longest path between any two leaf nodes).
diameter2: An optimized version of the diameter method that returns an object of type info containing the height and diameter of the tree.
isidentical: Checks if two binary trees are identical (have the same structure and node values).
issubtree: Checks if a binary tree is a subtree of another binary tree.
topview: Prints the top view of the binary tree (the nodes visible when viewed from the top).
kthlevel: Prints the nodes at the kth level of the binary tree.
lca: Finds the lowest common ancestor (LCA) of two nodes in the binary tree.
lca2: Another implementation of finding the LCA using recursion.
getdistance: Calculates the distance between the root and a specific node in the binary tree.
mindistance: Calculates the minimum distance between two nodes in the binary tree.
kthancestor: Prints the kth ancestor of a node in the binary tree.
transform: Transforms the binary tree by replacing each node value with the sum of values of its left and right subtree. Returns the sum of the original node value and its subtree values.
preorder: Performs a preorder traversal of the binary tree and prints the node values.
The main method is also included in the INITIATION class. It creates a binary tree with some sample nodes, applies the transform method to modify the tree, and then performs a preorder traversal to display the modified tree.

I hope this explanation helps! */
public class INITIATION{
    static class Node{
       int data;
       Node left;
       Node right;
         Node(int data){
              this.data = data;
              this.left= null;
              this.right=null;
         }
    }
   static class binarytree{
    static int idx=-1;
    public static Node buildtree(int nodes[]){
            idx++;
            if(nodes[idx]==-1){
                return null;
            }
            Node newnode = new Node(nodes[idx]);
            newnode.left = buildtree(nodes);
            newnode.right = buildtree(nodes);
            return newnode;
    }
   }

   //preorder tree 
   //rule 1=root,2=leftsubtree,3=rightsubtree
   
    //inorder tree 
    //rule 1=leftsubtree,2=root,3=righttree
    public static void inorder(Node root){
         if(root==null){
              return;
         }
         inorder(root.left);
         System.out.print(root.data+" ");
         inorder(root.right);
        }    

    //postorder tree
    //rule 1=leftsubtree,2=rightsubtree,3=root
    public static void postorder(Node root){
         if(root==null){
              return;
         }
         postorder(root.left);
         postorder(root.right);
         System.out.print(root.data+" ");
        }
    //levelorder traversal
    //rule 1=levelorder traversal level1,level2,lastlevel
    public static void levelorder(Node root){
         if(root==null){
              return;
         }
         Queue<Node> q = new LinkedList<>();
         q.add(root);
         while(q.size()>0){
              int count = q.size();
              for(int i=0;i<count;i++){
                   Node node = q.remove();
                   System.out.print(node.data+" ");
                   if(node.left!=null){
                        q.add(node.left);
                   }
                   if(node.right!=null){
                        q.add(node.right);
                   }
              }
              
         }
    }

    //height of a tree by nodes
    //rule 1=height of a tree is max of leftsubtree and rightsubtree+1
    public static int height(Node root){
         if(root==null){
              return 0;
         }
         int lh = height(root.left);
         int rh = height(root.right);
         return Math.max(lh,rh)+1;
    }
    
    //count of nodes
    //rule 1=count of nodes is count of leftcount and rightcount +1
    public static int count(Node root){
         if(root==null){
              return 0;
         }
         int lc = count(root.left);
         int rc = count(root.right);
         return lc+rc+1;
    }

    //sum of nodes
    //rule 1=sum of nodes is sum of leftsum and rightsum + root.data
    public static int sum(Node root){
         if(root==null){
              return 0;
         }
         int ls = sum(root.left);
         int rs = sum(root.right);
         return ls+rs+root.data;
    }
     
    //diameter of tree
    //rule 1=diameter of tree is max of leftdiameter and rightdiameter and leftsubtree height+rightsubtree height+1
    public static int diameter(Node root){//o(n^2)
         if(root==null){
              return 0;
         }
         int ld = diameter(root.left);
         int rd = diameter(root.right);
         int lh = height(root.left);
         int rh = height(root.right);
         return Math.max(lh+rh+1,Math.max(ld,rd));
    }
    //diameter of tree approach 2 by using class info that gives us diameter and ht in o(n)
    static class info{
         int ht;
         int diameter;
         public info(int ht,int diameter){
              this.ht=ht;
              this.diameter=diameter;
         }
    }
    public static info diameter2(Node root){
         if(root==null){
              return new info(0,0);
         }
         info linfo = diameter2(root.left);
         info rinfo = diameter2(root.right);
        
         int diameter = Math.max(linfo.ht+rinfo.ht+1,Math.max(linfo.diameter,rinfo.diameter));
         int ht= Math.max(linfo.ht, rinfo.ht)+1;
         return new info(ht,diameter);
    }

    //isidentical tree
    //rule 1=isidentical tree is when both leftsubtree and rightsubtree are identical
    public static boolean isidentical(Node node,Node subroot){
         if(node==null && subroot==null){
              return true;
         }
         if(node==null || subroot==null || node.data != subroot.data){
              return false;
         }
         if(!isidentical(node.left, subroot.right)){
            return false;
         }
         if(!isidentical(node.right, subroot.right)){
                return false;
          }
            return true;
         
    }
    //issubtree 
    public static boolean issubtree(Node root,Node subroot){
            if(root==null){
                return false;
            }
            if(root.data==subroot.data){
                if(isidentical(root, subroot)){
                    return true;
                }
            }

            return issubtree(root.left, subroot) || issubtree(root.right, subroot);
    }

     // top view of a tree by hashmap and levelorder traversal
        //rule 1=levelorder traversal level1,level2,lastlevel
    static class info1{
        Node node;
        int hd;
        public info1(Node node,int hd){
            this.node=node;
            this.hd=hd;
        }
    }     
    public static void topview(Node root){
    //level order
    Queue<info1> q= new LinkedList<>();
    HashMap<Integer,Node> map = new HashMap<>();     
    int min=0,max=0;
    q.add(new info1(root, 0));
    q.add(null);
    while(!q.isEmpty()){
     info1 curr = q.remove();
     if(curr==null){
          if(q.isEmpty()){
               break;
          }else{
               q.add(null);
          }
          }else {
               if(!map.containsKey(curr.hd)){
               map.put(curr.hd,curr.node);
               }
          if(curr.node.left!=null){
               q.add(new info1(curr.node.left,curr.hd-1));
               min=Math.min(min,curr.hd-1);
          }
          if(curr.node.right!=null){
               q.add(new info1(curr.node.right,curr.hd+1));
               max=Math.max(max,curr.hd+1);
          }
     
     }
    }    

    for(int i=min; i<=max; i++){
     System.out.print(map.get(i).data+" ");
    }
    System.out.println();
}

//kth level tree elements
public static void kthlevel(Node root, int level,int k){
     if(root==null) return;
     if(level==k){
          System.out.print(root.data+" ");
          return;
     }
     kthlevel(root.left, level+1, k);
     kthlevel(root.right, level+1, k);
}

//last common ancestor lca
public static boolean getpath(Node root,int n,ArrayList<Node> path){
     if(root==null) return false;
     path.add( root);    
     if(root.data==n){
          return true;
         }
         if(getpath(root.left,n,path) || getpath(root.right,n,path)){
          return true;
         }
         path.remove(path.size()-1);
         return false;
}

public static Node lca(Node root,int n, int n2){
     ArrayList<Node> path1=new ArrayList<Node>();
     ArrayList<Node> path2=new ArrayList<Node>();
     if(!getpath(root, n2, path2) || !getpath(root, n, path1)){
          return null;
     }
     int i=0;
     for(; i<path1.size() && i<path2.size(); i++){
          if(path1.get(i)!=path2.get(i)) break;
     }
     Node lca =path1.get(i-1);
     return lca;
}           

// last common ancestor lca2

public static Node lca2(Node root,int n, int n2){
     if(root==null) return null;
     if(root.data==n || root.data==n2){
          return root;
     }
     Node leftlca=lca2(root.left, n, n2);
     Node rightlca=lca2(root.right, n, n2);
     if(leftlca!=null && rightlca!=null){
          return root;
     }
     if(leftlca!=null){
          return leftlca;
     }
     return rightlca;
}
//get distance between lca to n
/*public static int getdistance(Node root,int n){
     if(root==null) return -1;
     if(root.data==n) return 0;
     int leftdist = getdistance(root.left, n);
     int rightdist= getdistance(root.right, n);
     if(leftdist==-1 && rightdist==-1)   return -1;
     else if(leftdist==-1)  return rightdist+1;
     else return leftdist+1;
     

     
}*/
public static int getdistance(Node root, int n) {
     if (root == null)
         return -1;
     
     if (root.data == n)
         return 0;
     
     int leftdist = getdistance(root.left, n);
     if (leftdist != -1)
         return leftdist + 1;
     
     int rightdist = getdistance(root.right, n);
     if (rightdist != -1)
         return rightdist + 1;
     
     return -1;
 }
 
// minimum distance between two nodes
public static int mindistance(Node root,int n, int n2){
     Node lca=lca2(root, n, n2);
     int d1=getdistance(lca, n);
     int d2=getdistance(lca, n2);
     
     return d1+d2;
}


//kth ancestor of a node 
/*public static int kthancestor(Node root,int n,int k){
     
     if(root.data==n) return 0;
     int left = kthancestor(root.left, n, k);
     int right = kthancestor(root.right, n, k);
     if(left==-1 && right==-1) return -1;
     int max = Math.max(left, right);
     if(max+1==k) System.out.println(root.data);
    return max+1;
     
     
    
     
}*/
public static int kthancestor(Node root, int n, int k) {
     if(root==null){
          return -1;
     }
     if(root.data==n){
          return 0;
     }
     
     
     int leftdistance = kthancestor(root.left, n, k);
     int rightdistance = kthancestor(root.right, n, k);
     
     if (leftdistance == -1 && rightdistance == -1)
         return -1;
     
     int max = Math.max(leftdistance, rightdistance);
     if (max + 1 == k) {
         System.out.println(root.data);
         
     }
     
     return max + 1;
 }
//transform to sum
 public static int transform(Node root) {
     if (root == null) {
         return 0;
     }
 
    
     
 
     int leftChild = transform(root.left);
     int rightChild = transform(root.right);
     int data = root.data;
     root.data = leftChild + rightChild;
     return data + root.data;
 }
 //to display the tree
 public static void preorder(Node root) {
     if (root == null) {
         return;
     }
     System.out.print(root.data + " ");
     preorder(root.left);
     preorder(root.right);
 }
 
 public static void main(String[] args) {
     Node root = new Node(1);
     root.left = new Node(2);
     root.right = new Node(3);
     root.left.left = new Node(4);
     root.left.right = new Node(5);
     root.right.left = new Node(6);
     root.right.right = new Node(7);
 
     transform(root);
     preorder(root);
 }

}
